<?xml version="1.0"?>
<doc>
    <assembly>
        <name>/home/mca/projects/mimeparse/MIMEParseConsole/bin/Debug/MIMEParseConsole</name>
    </assembly>
    <members>
        <member name="T:Amundsen.MimeParse">
            <summary>
            MIME-Type Parser
            This module provides basic functions for handling mime-types. It can handle
            matching mime-types against a list of media-ranges. See section 14.1 of
            the HTTP specification [RFC 2616] for a complete explanation.
            http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1
            Contents:
            - ParseMimeType()   : Parses a mime-type into its component parts.
            - ParseMediaRange() : Media-ranges are mime-types with wild-cards and a 'q' quality parameter.
            - Quality()         : Determines the quality ('q') of a mime-type when compared against a list of media-ranges.
            - QualityParsed()   : Just like quality() except the second parameter must be pre-parsed.
            - BestMatch()       : Choose the mime-type with the highest quality ('q') from a list of candidates.
            version : 0.1 (2009-02-10)
            author  : Mike Amundsen
            email   : mamund@yahoo.com
            credits : Joe Gregorio (joe@bitworking.org)
            notes   : This is a C# port of the original mimeparser (see credits)
            </summary>
        </member>
        <member name="T:Amundsen.MimeParse.ParseResults">
            <summary>
            ParseResults holds the results of parsing a MIME-type.
            </summary>
        </member>
        <member name="M:Amundsen.MimeParse.ParseResults.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Amundsen.MimeParse.ParseResults.#ctor(System.String,System.String,System.Collections.Hashtable)">
            <summary>
            Constructor
            </summary>
            <param name="type">
            </param>
            <param name="subType">
            </param>
            <param name="paramlist">
            </param>
        </member>
        <member name="P:Amundsen.MimeParse.ParseResults.Parameters">
            <summary>
            Additional MIME parameters
            </summary>
        </member>
        <member name="P:Amundsen.MimeParse.ParseResults.Type">
            <summary>
            MIME type value
            </summary>
        </member>
        <member name="P:Amundsen.MimeParse.ParseResults.SubType">
            <summary>
            MIME subtype value
            </summary>
        </member>
        <member name="M:Amundsen.MimeParse.ParseResults.GetHashCode">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Amundsen.MimeParse.ParseResults.Equals(System.Object)">
            <summary>
            Override the equals method
            </summary>
            <param name="obj">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:Amundsen.MimeParse.ParseResultsCollection">
            <summary>
            ParseResults collection class
            </summary>
        </member>
        <member name="M:Amundsen.MimeParse.ParseResultsCollection.Add(Amundsen.MimeParse.ParseResults)">
            <summary>
            Adds ParseResults objects to the collection
            </summary>
            <param name="parseResults">
            </param>
        </member>
        <member name="T:Amundsen.MimeParse.FitnessAndQuality">
            <summary>
            Fitness &amp; Quality class
            </summary>
        </member>
        <member name="M:Amundsen.MimeParse.FitnessAndQuality.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Amundsen.MimeParse.FitnessAndQuality.#ctor(System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="fitness">
            </param>
            <param name="quality">
            </param>
        </member>
        <member name="P:Amundsen.MimeParse.FitnessAndQuality.Order">
            <summary>
            Read-Only value indicating the order of the items in the list
            </summary>
        </member>
        <member name="P:Amundsen.MimeParse.FitnessAndQuality.Fitness">
            <summary>
            Fitness value
            </summary>
        </member>
        <member name="P:Amundsen.MimeParse.FitnessAndQuality.Quality">
            <summary>
            Quality value
            </summary>
        </member>
        <member name="P:Amundsen.MimeParse.FitnessAndQuality.MimeType">
            <summary>
            MIME-type value
            </summary>
        </member>
        <member name="M:Amundsen.MimeParse.FitnessAndQuality.CompareTo(System.Object)">
            <summary>
            Handles sorting details
            </summary>
            <param name="obj">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:Amundsen.MimeParse.FitnessAndQualityCollection">
            <summary>
            FitnessAndQuality collection class
            </summary>
        </member>
        <member name="M:Amundsen.MimeParse.FitnessAndQualityCollection.Add(Amundsen.MimeParse.FitnessAndQuality)">
            <summary>
            Add a new FitnessAndQuality object to the collection
            </summary>
            <param name="faq">
            </param>
        </member>
        <member name="M:Amundsen.MimeParse.FitnessAndQualityCollection.Sort">
            <summary>
            Sort the collection
            </summary>
        </member>
        <member name="M:Amundsen.MimeParse.FitnessAndQualityCollection.Last">
            <summary>
            Return the last object in the collection
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Amundsen.MimeParse.BestMatch(System.String[],System.String)">
            <summary>
            Takes a list of supported mime-types and finds the best
            match for all the media-ranges listed in header. The value of
            header must be a string that conforms to the format of the
            HTTP Accept: header. The value of 'supported' is a list of
            mime-types.
            &gt;&gt;&gt; best_match(['application/xbel+xml', 'text/xml'], 'text/*;q=0.5,*/*; q=0.1')
            'text/xml'
            </summary>
            <param name="supported">
            </param>
            <param name="header">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Amundsen.MimeParse.Quality(System.String,System.String)">
            <summary>
            Returns the quality 'q' of a mime-type when compared
            against the media-ranges in ranges. For example:
            &gt;&gt;&gt; quality('text/html','text/*;q=0.3, text/html;q=0.7, text/html;level=1, text/html;level=2;q=0.4, */*;q=0.5')
            0.7
            </summary>
            <param name="MimeType">
            </param>
            <param name="ranges">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Amundsen.MimeParse.ParseMediaRange(System.String)">
            <summary>
            Carves up a media range and returns a tuple of the
            (type, subtype, params) where 'params' is a dictionary
            of all the parameters for the media range.
            For example, the media range 'application/*;q=0.5' would
            get parsed into:
            ('application', '*', {'q', '0.5'})
            In addition this function also guarantees that there
            is a value for 'q' in the params dictionary, filling it
            in with a proper default if necessary.
            </summary>
            <param name="range">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Amundsen.MimeParse.ParseMimeType(System.String)">
            <summary>
            Carves up a mime-type and returns a tuple of the
            (type, subtype, params) where 'params' is a dictionary
            of all the parameters for the media range.
            For example, the media range 'application/xhtml;q=0.5' would
            get parsed into:
            ('application', 'xhtml', {'q', '0.5'})
            </summary>
            <param name="mimeType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Amundsen.MimeParse.FitnessAndQualityParsed(System.String,Amundsen.MimeParse.ParseResultsCollection)">
            <summary>
            Find the best match for a given mime-type against
            a list of media_ranges that have already been
            parsed by parse_media_range(). Returns a tuple of
            the fitness value and the value of the 'q' quality
            parameter of the best match, or (-1, 0) if no match
            was found. Just as for quality_parsed(), 'parsed_ranges'
            must be a list of parsed media ranges.
            </summary>
            <param name="mimeType">
            </param>
            <param name="parsedRanges">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Amundsen.MimeParse.QualityParsed(System.String,Amundsen.MimeParse.ParseResultsCollection)">
            <summary>
            Find the best match for a given mime-type against
            a list of media_ranges that have already been
            parsed by parse_media_range(). Returns the
            'q' quality parameter of the best match, 0 if no
            match was found. This function bahaves the same as quality()
            except that 'parsed_ranges' must be a list of
            parsed media ranges.
            </summary>
            <param name="mimeType">
            </param>
            <param name="parseColl">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Amundsen.MimeParse.Tests">
            <summary>
            Internal tests
            </summary>
        </member>
        <member name="T:Amundsen.Program">
            <summary>
            Console test app for MimeParse
            version : 0.1 (2009-02-10)
            author  : Mike Amundsen
            email   : mamund@yahoo.com
            credits : Joe Gregorio (joe@bitworking.org)
            notes   : This is a C# port of the original mimeparser (see credits)
            </summary>
        </member>
    </members>
</doc>
